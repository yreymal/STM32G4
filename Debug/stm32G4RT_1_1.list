
stm32G4RT_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e0  080005e8  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e0  080005e0  000015e8  2**0
                  CONTENTS
  4 .ARM          00000000  080005e0  080005e0  000015e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e0  080005e8  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e0  080005e0  000015e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005e4  080005e4  000015e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005e8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bc3  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002e5  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  000024c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a8  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013837  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001265  00000000  00000000  00015e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ff27  00000000  00000000  000170fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00087023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000274  00000000  00000000  00087068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000872dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080005c8 	.word	0x080005c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080005c8 	.word	0x080005c8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  ClockSetUp();
 800021e:	f000 f821 	bl	8000264 <ClockSetUp>

/* set LED2 pin output logic 0 and 1 for blinking */
  ConfiguratePA(LED2_PIN);
 8000222:	2005      	movs	r0, #5
 8000224:	f000 f8f0 	bl	8000408 <ConfiguratePA>

  while (1)
  {
    /* USER CODE END WHILE */
	  setPinLow(LED2_PIN);
 8000228:	2005      	movs	r0, #5
 800022a:	f000 f91b 	bl	8000464 <setPinLow>
      for (volatile int i = 0; i < 1000000; ++i){}
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e002      	b.n	800023a <main+0x22>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a08      	ldr	r2, [pc, #32]	@ (8000260 <main+0x48>)
 800023e:	4293      	cmp	r3, r2
 8000240:	ddf8      	ble.n	8000234 <main+0x1c>
	  setPinHigh(LED2_PIN);
 8000242:	2005      	movs	r0, #5
 8000244:	f000 f920 	bl	8000488 <setPinHigh>
	  for (volatile int i = 0; i < 1000000; ++i){}
 8000248:	2300      	movs	r3, #0
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	e002      	b.n	8000254 <main+0x3c>
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	4a02      	ldr	r2, [pc, #8]	@ (8000260 <main+0x48>)
 8000258:	4293      	cmp	r3, r2
 800025a:	ddf8      	ble.n	800024e <main+0x36>
	  setPinLow(LED2_PIN);
 800025c:	e7e4      	b.n	8000228 <main+0x10>
 800025e:	bf00      	nop
 8000260:	000f423f 	.word	0x000f423f

08000264 <ClockSetUp>:
 *             PLLM = 3, PLLN = 16, PLLR = 2
 *             SYSCLK = (24 MHz / 3) * 16 / 2 = 64 MHz
 *         HSI is disabled after switching to PLL for power saving.
 * @retval 0 on success, -1 on HSE timeout error
 */
int ClockSetUp(void){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 /*straightforward type int specification, using volatile to prevent SW optimization,
  like taking the value from a cash structure */
	volatile uint32_t startCounter;

	/* setting HSE oscillator */
	RCC->CR|=(1<<RCC_CR_HSEON_Pos);
 800026a:	4b65      	ldr	r3, [pc, #404]	@ (8000400 <ClockSetUp+0x19c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a64      	ldr	r2, [pc, #400]	@ (8000400 <ClockSetUp+0x19c>)
 8000270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000274:	6013      	str	r3, [r2, #0]

	/* wait until HSE will be set */
   for(startCounter=0;;++startCounter){
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]

	   /*we don't carry about all bits in CR register, we just need to compare with 1, bit that's HSERDY_Pos far from beginning of the register  */
	   if(RCC->CR & (1<<RCC_CR_HSERDY_Pos)){
 800027a:	4b61      	ldr	r3, [pc, #388]	@ (8000400 <ClockSetUp+0x19c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000282:	2b00      	cmp	r3, #0
 8000284:	d110      	bne.n	80002a8 <ClockSetUp+0x44>
		   break;
	   }
	   /* if it isn't set within a timeout, turn HSE off */
	   if(startCounter>0x1000){
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800028c:	d908      	bls.n	80002a0 <ClockSetUp+0x3c>
		   RCC->CR&= ~(1<<RCC_CR_HSEON_Pos);
 800028e:	4b5c      	ldr	r3, [pc, #368]	@ (8000400 <ClockSetUp+0x19c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a5b      	ldr	r2, [pc, #364]	@ (8000400 <ClockSetUp+0x19c>)
 8000294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000298:	6013      	str	r3, [r2, #0]

		   return -1;
 800029a:	f04f 33ff 	mov.w	r3, #4294967295
 800029e:	e0a8      	b.n	80003f2 <ClockSetUp+0x18e>
   for(startCounter=0;;++startCounter){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
	   if(RCC->CR & (1<<RCC_CR_HSERDY_Pos)){
 80002a6:	e7e8      	b.n	800027a <ClockSetUp+0x16>
		   break;
 80002a8:	bf00      	nop
	   }
   }

    /* turning PLL of, before tune it */
	RCC->CR&= ~ (1<<RCC_CR_PLLON_Pos);
 80002aa:	4b55      	ldr	r3, [pc, #340]	@ (8000400 <ClockSetUp+0x19c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a54      	ldr	r2, [pc, #336]	@ (8000400 <ClockSetUp+0x19c>)
 80002b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002b4:	6013      	str	r3, [r2, #0]

    /*clear PLLN(multiplier) bits field  */
    RCC->PLLCFGR&= ~RCC_PLLCFGR_PLLN_Msk;
 80002b6:	4b52      	ldr	r3, [pc, #328]	@ (8000400 <ClockSetUp+0x19c>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a51      	ldr	r2, [pc, #324]	@ (8000400 <ClockSetUp+0x19c>)
 80002bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80002c0:	60d3      	str	r3, [r2, #12]
    /* set multiplier to 16 */
    RCC->PLLCFGR|= (0x016<<RCC_PLLCFGR_PLLN_Pos);
 80002c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000400 <ClockSetUp+0x19c>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a4e      	ldr	r2, [pc, #312]	@ (8000400 <ClockSetUp+0x19c>)
 80002c8:	f443 53b0 	orr.w	r3, r3, #5632	@ 0x1600
 80002cc:	60d3      	str	r3, [r2, #12]

    /* clear PLLM (divider) value bits field */
    RCC->PLLCFGR&= ~RCC_PLLCFGR_PLLM_Msk;
 80002ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000400 <ClockSetUp+0x19c>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	4a4b      	ldr	r2, [pc, #300]	@ (8000400 <ClockSetUp+0x19c>)
 80002d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002d8:	60d3      	str	r3, [r2, #12]
    /* set PLLM divider to 3. The smallest value PLLM could have it's 1, so when we write 0 to this field, PLLM will be set to 1,
     * so when we want to achieve 3 value, we should add 2 to its bits field*/
    RCC->PLLCFGR|= (0x02 <<RCC_PLLCFGR_PLLM_Pos);
 80002da:	4b49      	ldr	r3, [pc, #292]	@ (8000400 <ClockSetUp+0x19c>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4a48      	ldr	r2, [pc, #288]	@ (8000400 <ClockSetUp+0x19c>)
 80002e0:	f043 0320 	orr.w	r3, r3, #32
 80002e4:	60d3      	str	r3, [r2, #12]
    /*if we use PLL for system clock it's needed to enable and use PLLR divider (minimum value is 2)     */
    RCC->PLLCFGR&= ~RCC_PLLCFGR_PLLR_Msk;
 80002e6:	4b46      	ldr	r3, [pc, #280]	@ (8000400 <ClockSetUp+0x19c>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	4a45      	ldr	r2, [pc, #276]	@ (8000400 <ClockSetUp+0x19c>)
 80002ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80002f0:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR|=(0<<RCC_PLLCFGR_PLLR_Pos); /* SYSCLK = PLL/PLLR(2)*/
 80002f2:	4b43      	ldr	r3, [pc, #268]	@ (8000400 <ClockSetUp+0x19c>)
 80002f4:	4a42      	ldr	r2, [pc, #264]	@ (8000400 <ClockSetUp+0x19c>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	60d3      	str	r3, [r2, #12]
    /* enable PLL(R) divider */
    RCC->PLLCFGR|=(1<<RCC_PLLCFGR_PLLREN_Pos);
 80002fa:	4b41      	ldr	r3, [pc, #260]	@ (8000400 <ClockSetUp+0x19c>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a40      	ldr	r2, [pc, #256]	@ (8000400 <ClockSetUp+0x19c>)
 8000300:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000304:	60d3      	str	r3, [r2, #12]


    /* clear PLL SRC value bits field */
    RCC->PLLCFGR&= ~RCC_PLLCFGR_PLLSRC_Msk;
 8000306:	4b3e      	ldr	r3, [pc, #248]	@ (8000400 <ClockSetUp+0x19c>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a3d      	ldr	r2, [pc, #244]	@ (8000400 <ClockSetUp+0x19c>)
 800030c:	f023 0303 	bic.w	r3, r3, #3
 8000310:	60d3      	str	r3, [r2, #12]
    /* 11: HSE clock selected as PLL clock entry */
    RCC->PLLCFGR|= (0b11<<RCC_PLLCFGR_PLLSRC_Pos);
 8000312:	4b3b      	ldr	r3, [pc, #236]	@ (8000400 <ClockSetUp+0x19c>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	4a3a      	ldr	r2, [pc, #232]	@ (8000400 <ClockSetUp+0x19c>)
 8000318:	f043 0303 	orr.w	r3, r3, #3
 800031c:	60d3      	str	r3, [r2, #12]
    /* wait PLL SRC switching */
    while((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Msk)!=(0b11<<RCC_PLLCFGR_PLLSRC_Pos)) {}
 800031e:	bf00      	nop
 8000320:	4b37      	ldr	r3, [pc, #220]	@ (8000400 <ClockSetUp+0x19c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	f003 0303 	and.w	r3, r3, #3
 8000328:	2b03      	cmp	r3, #3
 800032a:	d1f9      	bne.n	8000320 <ClockSetUp+0xbc>

     /* clean flash cycles bits field */
     FLASH->ACR&= ~FLASH_ACR_LATENCY_Msk;
 800032c:	4b35      	ldr	r3, [pc, #212]	@ (8000404 <ClockSetUp+0x1a0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a34      	ldr	r2, [pc, #208]	@ (8000404 <ClockSetUp+0x1a0>)
 8000332:	f023 030f 	bic.w	r3, r3, #15
 8000336:	6013      	str	r3, [r2, #0]
     /* 60 <=Fout(64MHz) <=68 * --> 3 reading cycles*/
     FLASH->ACR|= (0b0011<<FLASH_ACR_LATENCY_Pos);
 8000338:	4b32      	ldr	r3, [pc, #200]	@ (8000404 <ClockSetUp+0x1a0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a31      	ldr	r2, [pc, #196]	@ (8000404 <ClockSetUp+0x1a0>)
 800033e:	f043 0303 	orr.w	r3, r3, #3
 8000342:	6013      	str	r3, [r2, #0]

     /* for stm32G4 - no prescalers is needed, while SYSCLK < 170MHz, so set prescalers to 1 */
     /* By clearing correspond bits fields, we write there 0, what means /1 prescaler */
     RCC->CFGR&= ~RCC_CFGR_PPRE1_Msk; /* APB1 prescaler */
 8000344:	4b2e      	ldr	r3, [pc, #184]	@ (8000400 <ClockSetUp+0x19c>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a2d      	ldr	r2, [pc, #180]	@ (8000400 <ClockSetUp+0x19c>)
 800034a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800034e:	6093      	str	r3, [r2, #8]
     RCC->CFGR&= ~RCC_CFGR_PPRE2_Msk; /* APB2 prescaler */
 8000350:	4b2b      	ldr	r3, [pc, #172]	@ (8000400 <ClockSetUp+0x19c>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a2a      	ldr	r2, [pc, #168]	@ (8000400 <ClockSetUp+0x19c>)
 8000356:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800035a:	6093      	str	r3, [r2, #8]
     RCC->CFGR&= ~RCC_CFGR_HPRE_Msk;  /* AHB prescaler */
 800035c:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <ClockSetUp+0x19c>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a27      	ldr	r2, [pc, #156]	@ (8000400 <ClockSetUp+0x19c>)
 8000362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000366:	6093      	str	r3, [r2, #8]

     /* turn on the PLL after configuration */
     RCC->CR|=(1<<RCC_CR_PLLON_Pos);
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <ClockSetUp+0x19c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a24      	ldr	r2, [pc, #144]	@ (8000400 <ClockSetUp+0x19c>)
 800036e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000372:	6013      	str	r3, [r2, #0]
     for(startCounter=0;;++startCounter){
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
     	if(RCC->CR & (1<<RCC_CR_PLLRDY_Pos))
 8000378:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <ClockSetUp+0x19c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d114      	bne.n	80003ae <ClockSetUp+0x14a>
     		break;

     	if(startCounter>0x1000){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800038a:	d90c      	bls.n	80003a6 <ClockSetUp+0x142>
     		/*tuning off HSE and PLL */
     		RCC->CR&= ~(1<<RCC_CR_HSEON_Pos);
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <ClockSetUp+0x19c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a1b      	ldr	r2, [pc, #108]	@ (8000400 <ClockSetUp+0x19c>)
 8000392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000396:	6013      	str	r3, [r2, #0]
     		RCC->CR&= ~(1<<RCC_CR_PLLON_Pos);
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <ClockSetUp+0x19c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a18      	ldr	r2, [pc, #96]	@ (8000400 <ClockSetUp+0x19c>)
 800039e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003a2:	6013      	str	r3, [r2, #0]

     		break;
 80003a4:	e004      	b.n	80003b0 <ClockSetUp+0x14c>
     for(startCounter=0;;++startCounter){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3301      	adds	r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
     	if(RCC->CR & (1<<RCC_CR_PLLRDY_Pos))
 80003ac:	e7e4      	b.n	8000378 <ClockSetUp+0x114>
     		break;
 80003ae:	bf00      	nop
     		}
     	}
     /* clear system clock bits field  */
     RCC->CFGR&= ~RCC_CFGR_SW_Msk;
 80003b0:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <ClockSetUp+0x19c>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a12      	ldr	r2, [pc, #72]	@ (8000400 <ClockSetUp+0x19c>)
 80003b6:	f023 0303 	bic.w	r3, r3, #3
 80003ba:	6093      	str	r3, [r2, #8]
     /* 11: PLL selected as system clock */
     RCC->CFGR|= (0b11<<RCC_CFGR_SW_Pos);
 80003bc:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <ClockSetUp+0x19c>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000400 <ClockSetUp+0x19c>)
 80003c2:	f043 0303 	orr.w	r3, r3, #3
 80003c6:	6093      	str	r3, [r2, #8]
     /* wait until SYSCLK switch to PLL*/
     while(
 80003c8:	bf00      	nop
 		   (RCC->CFGR & RCC_CFGR_SWS_Msk) /* select only SWS bits from an entire register * ( 0bxxxx10xxx - CFGR register,
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <ClockSetUp+0x19c>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f003 030c 	and.w	r3, r3, #12
 		    							after mask we keep only _____10__ value)*/
 		   !=
 80003d2:	2b0c      	cmp	r3, #12
 80003d4:	d1f9      	bne.n	80003ca <ClockSetUp+0x166>
 		    										!=
 		    										  2<<Pos (__)	*/
 		   ){}

     /* After we switched to HSE for PLL, we can turn off HSI for power saving */
     RCC->CR&= ~(1<<RCC_CR_HSION_Pos);
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <ClockSetUp+0x19c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <ClockSetUp+0x19c>)
 80003dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003e0:	6013      	str	r3, [r2, #0]
     while((RCC->CR & (1<<RCC_CR_HSIRDY_Pos))!=0){}
 80003e2:	bf00      	nop
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <ClockSetUp+0x19c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f9      	bne.n	80003e4 <ClockSetUp+0x180>

     return 0;
 80003f0:	2300      	movs	r3, #0
    }
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40022000 	.word	0x40022000

08000408 <ConfiguratePA>:

/* Set portA pinNumber output mode */
int ConfiguratePA(int pintNumber){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	/* Enable clock for GPIOA */
	RCC->AHB2ENR|=(1<<RCC_AHB2ENR_GPIOAEN_Pos);
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ConfiguratePA+0x58>)
 8000412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000414:	4a12      	ldr	r2, [pc, #72]	@ (8000460 <ConfiguratePA+0x58>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* clean pintNumber field bits, each pin has 2 bits*/
	GPIOA->MODER&=~(0b11<<(RCC_AHB2ENR_GPIOAEN_Pos + pintNumber*2));
 800041c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	0052      	lsls	r2, r2, #1
 8000426:	4611      	mov	r1, r2
 8000428:	2203      	movs	r2, #3
 800042a:	408a      	lsls	r2, r1
 800042c:	43d2      	mvns	r2, r2
 800042e:	4611      	mov	r1, r2
 8000430:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000434:	400b      	ands	r3, r1
 8000436:	6013      	str	r3, [r2, #0]
	/* General purpose output mode */
	GPIOA->MODER|=(0b01<<(RCC_AHB2ENR_GPIOAEN_Pos + pintNumber*2));
 8000438:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	0052      	lsls	r2, r2, #1
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	4611      	mov	r1, r2
 800044a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800044e:	430b      	orrs	r3, r1
 8000450:	6013      	str	r3, [r2, #0]

	return 0;
 8000452:	2300      	movs	r3, #0
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <setPinLow>:

void setPinLow(unsigned short int pinNumber){
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	80fb      	strh	r3, [r7, #6]

	GPIOA->BSRR = (1<<(pinNumber + 16));
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	3310      	adds	r3, #16
 8000472:	2201      	movs	r2, #1
 8000474:	409a      	lsls	r2, r3
 8000476:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800047a:	619a      	str	r2, [r3, #24]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <setPinHigh>:

void setPinHigh(unsigned int pinNumber){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

	GPIOA->BSRR = (1<<pinNumber);
 8000490:	2201      	movs	r2, #1
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	409a      	lsls	r2, r3
 8000496:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800049a:	619a      	str	r2, [r3, #24]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <NMI_Handler+0x4>

080004b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <UsageFault_Handler+0x4>

080004d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <SystemInit+0x20>)
 800050e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000512:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <SystemInit+0x20>)
 8000514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000530:	f7ff ffea 	bl	8000508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	@ (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	@ (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800055a:	f000 f811 	bl	8000580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800055e:	f7ff fe5b 	bl	8000218 <main>

08000562 <LoopForever>:

LoopForever:
    b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000570:	080005e8 	.word	0x080005e8
  ldr r2, =_sbss
 8000574:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000578:	2000001c 	.word	0x2000001c

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	4d0d      	ldr	r5, [pc, #52]	@ (80005b8 <__libc_init_array+0x38>)
 8000584:	4c0d      	ldr	r4, [pc, #52]	@ (80005bc <__libc_init_array+0x3c>)
 8000586:	1b64      	subs	r4, r4, r5
 8000588:	10a4      	asrs	r4, r4, #2
 800058a:	2600      	movs	r6, #0
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	4d0b      	ldr	r5, [pc, #44]	@ (80005c0 <__libc_init_array+0x40>)
 8000592:	4c0c      	ldr	r4, [pc, #48]	@ (80005c4 <__libc_init_array+0x44>)
 8000594:	f000 f818 	bl	80005c8 <_init>
 8000598:	1b64      	subs	r4, r4, r5
 800059a:	10a4      	asrs	r4, r4, #2
 800059c:	2600      	movs	r6, #0
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e0 	.word	0x080005e0
 80005bc:	080005e0 	.word	0x080005e0
 80005c0:	080005e0 	.word	0x080005e0
 80005c4:	080005e4 	.word	0x080005e4

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
